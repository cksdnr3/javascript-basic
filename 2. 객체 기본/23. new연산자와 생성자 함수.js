//                                                                 new 연산자와 생성자 함수
// 객체 리터럴을 사용하면 객체를 쉽게 만들 수 있다. 그런데 개발을 하다 보면 유사한 객체를 여러 개 만들어야 할 때가 생기곤한다.
// 복수의 사용자, 메뉴 내 다양한 아이템을 객체로 표현하랴고 하는 경우...
// new 연산자와 생성자 함수를 사용하면 유사한 객체 여러 개를 쉽게 만들 수 있다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                          생성자 함수(constructor function)
// 생성자 함수와 일반 함수에 기술적인 차이는 없다. 다만 생성자 함수는 아래 두 관례를 따른다.
// 1. 함수 이름의 첫 글자는 대문자로 시작한다.
// 2. 반드시 new 연산자를 붙여 실행한다.
function User(name) {
    // this = {}; (빈 객체가 암시적으로 만들어짐)

    this.name = name;
    this.isAdmin = false;

    // return this; (this가 암시적으로 반환됨)
}

let user = new User("Jack");

alert(user.name); // Jack
alert(user.isAdmin); // false

// new User(...)를 써서 함수를 실행하면 아래와 같은 알고리즘이 동작한다.
// 1. 빈 객체를 만들어 this에 할당한다.
// 2. 함수 본문을 실행한다. this에 새로운 프로퍼티를 추가해 this를 수정한다.
// 3. this를 반환한다.

// new User("Jack") 이외에도 new User("Ann") 처럼 손쉽게 사용자 객체를 만들 수 있따. 객체 리터럴 문법으로 일일이 객체를 만드는 방법보다 훨씬 간단하고
// 읽기 쉽게 객체를 만들 수 있게 된다.
// 생성자의 의의는 재사용할 수 있는 객체 생성 코드를 구현하는 것이다.

// (!) new를 붙여 실행한다면 어떤 함수라도 위에 언급된 알고리즘이 실행된다.

// (I) new function() 재사용할 필요가 없는 복잡한 객체를 만들어야 할 때, 아래와 같이 코드를 익명 생성자 함수로 감싸주는 방식을 사용할 수 있다.
let user = new function() {
    this.name = "John";
    this.isAdmin = false;
}
// 위 생성자 함수는 익명 함수이기 때문에 어디에도 저장되지 않는다. 처음 만들 때부터 단 한 번만 호출할 목적으로 만들었기 때문에 재사용도 안된다.
// 이렇게 재사용은 막으면서 코드를 캡슐화 할 수 있다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                              생성자와 return문
// 생상자 함수엔 보통 return문이 없다. 반환해야 할 것들은 모두 this에 저장되고 this는 자동으로 반환 되기 때문에 반환문을 명시적으로 써줄 필요가 없다.
// 그런데 만약 return문이 있다면 어떤 일이 벌어질까?
// 객체를 return한다면 this 대신 객체가 반환된다.
// 원시형을 return한다면, return문이 무시된다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                          생성자 내 메서드
// 생성자 함수를 사용하면 매개변수를 이용해 객체 내부를 자유롭게 구성할 수 있다. 엄청난 유언성이 확보됨.
// 내부를 자유롭게 구성하고 메서드를 추가해 기능또한 자유롭게 구성이 가능하다.

function User(name) {
    this.name = name;

    this.sayHi = function() {
        alert( "My name is: " + this.name ); // 메서드도 추가 가능
    }

}
