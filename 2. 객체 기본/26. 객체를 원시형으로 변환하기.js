//                                                           객체를 원시형으로 변환하기
// obj1 + obj2 처럼 객체끼리 더하는 연산을 하거나, obj1 - obj2 처럼 객체끼리 빼는 연산을 하면 어떤 일이 일어날까?
// alert(obj)로 객체를 출력할 때는 무슨 일이 발생할까?
// 모든 경우에 자동 형 변환이 일어난다. 객체가 원시값으로 변환되고, 의도한 연산이 수행된다.

// 대표적인 객체 -> 원시형 형변환
// 1. 객체는 논리평가 시 true를 반환한다. 단 하나의 예외도 없이. 따라서 객체는 숫자형이나 문자형으로만 형변환 한다.
// 2. 숫자형으로의 형 변환은 객체끼리 빼는 연산을 할 때나, 수학 관련 함수를 적용할 때 일어난다.
// 3. 문자형으로의 형 변환은 대개 alert(obj)와 같이 객체를 출력하려고 할 때 일어난다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                          ToPrimitive
// 특수 객체 메서드를 사용하면 숫자형이나 문자형으로의 형 변환을 원하는 대로 조절할 수 있다.
// 객체 형 변환은 세 종류로 구분되는데, hint라 불리는 값이 구분 기준이 된다. ('목표로 하는 자료형' 정도로 이해하고 넘어가세요)

// "string"
// alert함수같이 문자열을 기대하는 연산을 수행하는 때는 hint가 string이 된다.

// "number"
// 수학 연산을 적용하려 할 때, hint는 number가 된다.

// "default"
// 연산자가 기대하는 자료형이 확실하지 않을 때 hint는 default가 된다. (아주 드문 경우)
// 예를 들어 이항 덧셈 연산자 +는 피연산자의 자료형에 따라 문자열을 합치는 경우도 있고 숫자를 더해주는 경우도 있기 때문에.

// (I) Date객체를 제외한 모든 내장 객체는 hint가 default인 경우와 number인 경우를 동일하게 처리한다.
// 때문에 이런 사항을 외울 필요는 없음!

// 자바스크립트는 형 변환이 필요할 때, 아래와 같은 알고리즘에 따라 원하는 메서드를 찾고 호출한다.
// 1. 객체에 obj[Symbol.toPrimitive](hint) 메서드가 있는지 찾고, 있다면 메서드를 호출한다. Symbol.toPrimitive는 시스템 심볼로, 심볼형 키로 사용된다.
// 2. 1에 해당하지 않고 hint가 "string"이라면, obj.toString()이나 obj.valueOf()를 호출한다. (존재하는 메서드만 실행됨).
// 3. 1과 2에 해당하지 않고 hint가 "number나 "default"면 obj.valueOf()나 obj.toString()을 호출한다. (존재하는 메서드만 실행됨).

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                      Symbol.toPrimitive
// 자바스크립트엔 Symbol.toPrimitive라는 내장 심볼이 존재하는데, 이 심볼은 목표로 하는 자료형을 명명하는 데 사용된다.
obj[Symbol.toPrimitive] = function(hint) {
    // 반드시 원시값을 반환해야 한다.
}
// 예시
let user = {
    name: "John",
    money: 1000,

    [Symbol.toPrimitive](hint) {
        alert(`hint" ${hint}`);
        return hint == "string" ? `{name: "${this.name}"}` : this.money;
    }
}

alert(user); // hint: string -> {name: John}
alert(+user); // hint: number -> 1000
alert(user + 500); // hint: default -> 1500

// 객체 형 변환은 형 변환이 필요한 경우 필요한 메서드를 선언하고 목표로 하는 자료형을 사용하는 느낌 인듯?

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                              toString과 valueOf
