//                                                      객체
// 객체는 오직 하나의 데이터만 담을 수 있는 원시형과는 달리 다양한 데이터를 담을 수 있다.
// 키로 구분된 데이터 집합이나 복잡한 개체(entity)를 저장할 수 있다.
// 객체는 중괄호를 이용해 만들 수 있고 키(key):값(value)쌍으로 구성된 프로퍼티를 여러개 넣을 수 있는데, 키엔 문자형 값엔 모든 자료형이 허용된다.

// 문법
let user = new Object(); // 객체 생성자 문법
let user = {}; // 객체 리터럴 문법

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                  리터럴과 프로퍼티
// 중괄호 안에는 키:값 쌍으로 구성된 프로퍼티가 들어간다.
let user = {
    name: "John",
    age: 30
};
// 콜론(:)을 기준으로 왼쪽엔 키가, 오른쪽엔 값이 위치한다. 키는 '프로퍼티 이름' 혹은  '식별자'라고도 부른다.

// 점 표기법을 이용하면 프로퍼티 값을 읽을 수 있다.
alert( user.name ); // John
laert( user.age ); // 30

user.isAdmin = true; // 프로퍼티 추가, 값에는 불린형도 올 수 있으면 점 표기법을 통해 프로퍼티를 추가할 수도 있다.

// delete 연산자를 사용하면 프로퍼티를 삭제할 수 있다.
delete user.age;

// 여러 단어를 조합해 프로퍼티 이름을 만든 경우엔 프로퍼티 이름을 따옴표로 묶어줘야 한다.
let user = {
    "likes birds": true
}

// (I) 상수 객체는 수정될 수 있다.
// const로 선언된 객체는 수정될 수 있다.
const user = {
    name: "John"
};
user.name = "Pete";
alert(user.name); // Pete
// const는 user의 값을 고정하지만, 그 내용은 고정하지 않는다. const는 user = ...를 전체적으로 설정하려고 할 때만 오류가 발생
// 예를 들어 객체를 원시형으로 변경한다던가 배열로변경한다던가 그런 것은 허용하지 않음

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                              대괄호 표기법
// 여러 단어를 조합해 프로퍼티 키를 만든 경우 점 표기법을 사용해 프로퍼티 값을 읽을 수 없다.
// user.likes birds = true 이런 식으로 읽으려고 하면 오류가 발생
// 점 표기법은 키가 유효한 변수 식별자인 경우에만 사용할 수 있다.
// 키가 유혀한 변수 식별자가 아닌 경우엔 대괄호 표기법이라 불리는 방법을 사용할 수 있다.
let user = {};
user["likes birds"] = true; // set
alert(user["likes birds"]); // true, get
delete user["likes birds"]; // delete

// 대괄호 표기법을 사용하면 아래 예시에서 변수를 키로 사용한 것과 같이 문자열뿐만 아니라 모든 표현식의 평가 결과를 프로퍼티 키로 사용할 수 있다.
let key = "likes birds";
user[key] = true; // 변수 key를 사용해 key: true 프로퍼티를 추가함
// 변수 key는 런타임에 평가되기 때문에 prompt()처럼 사용자 입력값 변경 등에 따라 값이 변경될 경우에 변수를 사용하면 코드를 유연하게 작성 할 수 있다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                      계산된 프로퍼티
// 객체를 만들 때 객체 리터럴 안의 프로퍼티 키가 대괄호로 둘러싸여 있는 경우, 이를 계산된 프로퍼티(computed property)라고 부른다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                      단축 프로퍼티
// 실무에선 프로퍼티 값을 기존 변수에서 받아와 사용하는 경우가 종종 있다.
function makeUser(name, age) {
    return {
        name: name, // 매개변수를 값으로 사용함
        age // age: age 와 같음 키와 값이 같은경우 하나로 단축할 수 있음
    };
}
let user = makeUser("John", 30);
alert(user.name); // John

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                              프로퍼티 이름의 제약사항
// 변수 이름엔 for, let 같은 예약어를 사용하면 안된다.
// 객체 프로퍼티엔 이런 제약이 없음
// 문자형이나 심볼형에 속하지 않은 값은 문자열로 자동 형 변환 된다. 예를 들어 키에 숫자 0을 넣으면 문자열"0"으로 자동변환 된다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                             in 연산자로 프로퍼티 존재 여부 확인하기
// 자바스크립트 객체의 중요한 특징 중 하나는 다른 언어와는 달리, 존재하지 않는 프로퍼티에 접근하려 해도 에러가 발생하지 않고 undefined를 반환한다는 것이다.
let user = {};
alert( user.noSuchProperty === undefined ); // true, 프로퍼티 존재여부 확인법 undefined로 비교

// undefined비교 외에 연산자 in을 사용해 프로퍼티 존재여부를 확인할 수 있다.
// 문법
"key" in Object // 왼쪽엔 반드시 프로퍼티 이름이 와야한다. 이름은 보통 따옴표로 감싼 문자열이다.
// 예시
let user = { name: "John", age: 30};
alert( "age" in user ); // true, user.age가 존재하기 때문
alert( "gender" in user ); // false user.gender가 없기 때문

// in 연산자와 undefined비교의 차이점
let obj = {
    test: undefined
};
alert(obj.test); // undefined, 프로퍼티는 실제로 존재하지만 값이 undefined이기 때문
alert( "test" in obj ); // true, 값의 유무만 정확히 확인
// undefined는 변수는 정의되어 있으나 값이 할당되지 않은 경우에 사용!!
// 값을 알 수 없거나 비어 있다면 주로 null을 사용한다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                               for...in 반복문
// for...in 반복문을 사용하면 객체의 모든 키를 순회할 수 있다.
// 문법
let user = {
    name: "John",
    age: 30,
    isAdmin: true
  };
  
  for (let key in user) {
    // 키
    alert( key );  // name, age, isAdmin
    // 키에 해당하는 값
    alert( user[key] ); // John, 30, true
  }
// 반복 변수(looping variable) key를 선언하고 프로퍼티 키가 순회하며 반복 변수 key에 담긴다.
// user[key]를 통해 값을 순회할 수도 있다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                                  객체 정렬 방식
// 객체는 특별한 방식으로 정렬된다. 정수 프로퍼티는 오름차순으로 자동으로 정렬되고, 그 외의 프로퍼티는 객체에 추가한 순서 그대로 정렬된다.

let codes = {
    "49": "독일",
    "41": "스위스",
    "44": "영국",
    // ..,
    "1": "미국"
  };
  
  for (let code in codes) {
    alert(code); // 1, 41, 44, 49, 키가 정수 프로퍼티이기 때문에 오름차순으로 정렬된다.
  }
// (I) 정수프로퍼티란?
// 변형 없이 정수에서 왔다 갔다 할 수 있는 문자열을 의미한다. 문자열 "49"는 정수로 변환하거나 변환한 정수를 다시 문자열로 바꿔도 변형이 없기 때문에
// 정수 프로퍼티 이다. 하지만 +49는 항상 숫자이기 때문에 1.2는 정수가 아니기 때문에 정수프로퍼티가 아님

let user = {
    name: "John",
    surname: "Smith"
  };
  user.age = 25; // 프로퍼티를 하나 추가합니다.
  
  // 정수 프로퍼티가 아닌 프로퍼티는 추가된 순서대로 나열됩니다.
  for (let prop in user) {
    alert( prop ); // name, surname, age
  }
// 키가 문자열인 경우 먼저 작성된 순서대로 프로퍼티가 나열된다.