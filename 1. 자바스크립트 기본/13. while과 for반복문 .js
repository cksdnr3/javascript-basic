//                                                              while과 for반복문 (loop)
// 반복문을 통해 동일한 코드를 여러 번 반복할 수 있다.
// 반복문 본문이 한 번 실행되는 것을 반복(iteration, 이터레이션)이라고 부른다.

//                                                              while 반복문
while (condition) {
    // 반복문 본문(body)
}
// condition이 truthy면 반복문 본문의 코드가 실행된다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                          do... while 반복문
do {
    // body
} while (condition);
// body가 먼저 한 번 실행되고 조건이 truthy이면 본문을 반복한다.
// 본문을 최소한 한번이라도 실행하고 싶을 때 사용

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                             for 반복문
for (begin; condition; step) {
    // body
}
// begin을 실행함 -> condition이 truthy이면 -> body를 실행한 후, step을 실행한다.

// (I) 인라인 변수 선언
// 카운터 변수 i를 반복문 안에서 선언했다. 이런 방식을 인라인 변수 선언이라고 부른다. 반복문 안에서만 접근 가능

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                          반복문 빠져나오기
// 대게는 반복문의 조건이 falsy가 되면 박복문이 종료된다.
// 그런데 특별한 지시자인 break를 사용하면 언제든 원하는 때에 반복문을 빠져나올 수 있다.
let sum = 0;
while (true) {
    let value = +prompt("숫자를 입력하세요", '');
    if (!value) break; // value가 falsy면 break해라, prompt에서 받아온 값이 0이거나 취소하거나 빈값을 보내면 falsy

    sum += value;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                          다음 반복으로 넘어가기
// continue지시자는 break의 가벼운 버전이다. 반복문을 전체 중단하지 않고 현재 실행 중인 이터레이션만 멈추고 다음 이터레이션을 강제 실행하게 한다.
for (let i = 0; i < 10; i++) { // 홀수만 출력하는 반복문
    if (i % 2 == 0) continue; // 값을 2로 나누었을 때 나머지가 0이면(짝수면) 현재 반복 종료

    alert(i); // 1, 3, 5, 7, 9가 차례대로 출력된다.
}

// (I) continue는 중첩을 줄이는 데 도움을 준다.
for (let i = 0; i < 10; i++) {
    if (i % 2) {
        alert(i);
    }
}
// 기술적 관점으로는 문제가 없지만, 중첩 레벨이 늘어난다. if안의 코드가 길어지면 가독성이 떨어질 수 있다.

// (!) '?'오른쪽엔 break나 continue가 올 수 없다.
// 물음표 연산자?를 if대용으로 사용하지 말 것!

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                          break/continue와 레이블
// 여러 개의 중첩 반복문을 한 번에 빠져나와야 하는 경우가 종종 생기곤 한다.
// 사용자가 값을 입력하지 않거나 취소했을 때 break지시자를 사용해 반복문을 나오는 경우를 예를 들어보면
// 평범한 break지시자르 사용하면 안쪽에 있는 반복문만 빠져나올 수 있지만, label을 이용하면 원하는 레이블의 반복문으로 빠져나올 수 있다.
labelName: for (let i = 0; i < 3; i++) {

    for (let j = 0; j < 3; j++) {
        let input = prompt(`(${i},${j})의 값`, '');

        if (!input) break labelName; // input의 값이 falsy이면 labelName이라는 이름이 붙은 label의 반복문을 종료시킨다.
    }
}
alert('완료!');

// (!) 레이블은 마음대로 점프할 수 있게 해주지 않는다.
break label;
label: for (;;) {};
// break와 continuew는 반복문 안에서만 사용할 수 있고, 레이블은 반드시 break나 continue지시자 위에 있어야 한다. label이 먼저 선언되어야 사용가능
