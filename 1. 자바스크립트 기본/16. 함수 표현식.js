//                                                          함수 표현식
// 자바스크립트는 함수를 "특별한 종류의 값"으로 취급한다. 다른 언어에서처럼 "특별한 동작을 하는 구조"로 취급하지 않는다.

// 함수 표현식(function expression)
let sayHi = function() {
    alert( "Hello" );
};
// 함수를 생성하고 변수에 값을 할당하는 것처럼 함수가 변수에 할당되었다. 함수가 어떤 방식으로 만들어졌는지에 관계없이 함수는 값이고, 따라서 변수에 할당할 수 있다.

// 함수는 값이기 때문에 alert를 이용하여 함수 코드를 출력할 수도 있다.
alert( sayHi ); // function sayHi() {
                //   alert( "Hello" ); , 모달 창에는 옆에 코드가 그대로 출력된다. 값이기 때문에 문자열로 코드를 그대로 보여주게됨.
                // }
// 마지막 줄에서 sayHi옆에 괄호가 없기 때문에 함수는 실행되지 않는다.

// 함수는 값이기 때문에 값에 할 수 있는 일을 똑같이 할 수 있다.
// 함수 복사
function sayHi() {
    alert( "Hello" ); // 함수 생성
}

let func = sayHi; // 함수 복사, 값으로 취급하기 위해 괄호가 없음 괄호가 있으면 함수가 실행되버림

func(); // Hello
sayHi(); // Hello

// (I) 중괄호로 만든 코드 블록 끝엔 마침표(;)가 없어도 된다.
// 하지만 함수 표현식은 함수는 값의 역할을 하기 때문에 코드 블록이 아닌 값처럼 취급된다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                         콜백 함수
function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
}

function showOk() {
    alert("동의");
}

function showCancel() {
    alert("취소");
}

ask("동의하십니까?", showOk, showCancel);
// 위 예시는 동의하십니까? 라는 질문을 confirm창에 띄워 확인 혹은 취소에 따라 showOk함수와 showCancel함수를 콜백 시키는 함수다.
// showOk, chowCancel은 콜백함수인데 함수를 값으로 보고 매개변수 yes와 no에 복사 할당하는 예를 보여준다.
// 위 예시는 아래와 같이 줄일 수 있다.
function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
}
ask(
    "동의하십니까?",
    function() {alert("동의");},
    function() {alert("취소");}
);
// ask() 안에 선언된 이름이 없는 함수를 익명 함수라고 부른다.
// 익명 함수는 변수에 할당된 게 아니기 때문에 ask 바깥에선 접근할 수 없다. 그저 "일회용 값"으로 사용하기 위함.

// (I) 함수는 동작을 나타내는 값이다.
// 문자열이나 숫자등의 일반적인 값들은 데이터를 나타낸다.
// 함수는 하나의 동작을 나타낸다.
// 동작을 대변하는 값인 함수를 변수 간 전달하고, 동작이 필요할 때는 이 값을 실행하면 된다. - 값으로서 변수에 담아 전달, 함수로서 실행

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                          함수 표현식 vs 함수 선언문
// 함수 표현식과 함수 선언문의 차이

// 1. 문법의 차이
// 함수 선언문: 함수 주요 코드 흐름 중간에 독자적인 구문 형태로 존재
// 함수 표현식: 함수는 표현식이나 구문 구성 내부에 생성된다. 보통 할당 연산자를 통해 할당 표현식 우측에 생성된다.
let sum = function(a, b) {  // 할당 표현식 우측에 표현
    return a + b;           
};

// 2. 자바스크립트엔진이 언제 함수를 생성하나?
// 함수 표현식: 실제 실행 흐름이 해당 함수에 도달했을 때 함수를 생성한다. 따라서 실행 흐름이 함수에 도달했을 때부터 해당 함수를 사용할 수 있다.
// 함수 선언문: 함수 선언문이 정의듸기 전에도 호출할 수 있다.
//              자바스크립트는 스크립트를 실행하기 전, 준비단계에서 전역에 선언된 함수 선언문을 찾고 해당 함수를 생성한다.
//              초기화 단계에서 함수 선언 방식으로 정의한 함수가 생성된다.

// 3. 스코프
// 엄격 모드에서 함수 선언문이 코드 블록 내에 위치하면 해당 함수는 블록 내 어디서든 접근할 수 있다. 하지만 블록 밖에서는 접근하지 못한다.
// 예를 들어 런타임에 그 값을 알 수 있는 변수 ㅁGE가 있고, 이 변수의 값에 따라 함수 welcome()을 다르게 정의해야 하는 상황이다.
// 그리고 welcome은 나중에 사용해야 하는 상황이라고 가정해보면
let age = prompt("나이를 알려주세요", 18);

if (age < 18) {
    function welcome() {
        alert("안녕");      
    }
} else {
    function welcome() {
        alert("안녕하세요");
    }
}
welcome(); // Error: welcome is not defined, 함수 외부에선 접근이 불가능 하다. 하지만 함수 내부에선 접근가능
//                                           코드블록 내부의 것은 전역으로 선언할 수 없기 때문
//                                           자바스크립트는 대게 내부에서 외부접근은 허용하지만, 외부에서 내부접근은 안된다.

let age = prompt("나이?", 18);
let welcome;
if( age < 18) {
    welcome = function() {
        alert("안녕");
    };
} else {
    welcome = function() {
        alert("안녕하세요!");
    };
}
welcome(); // 제대로 동작

// (I) 함수 선언문과 함수 표현식 중 무엇을 선택해야 하나요?
// 함수 선언문을 이용해 함수를 선언하는 걸 먼저 고려하는 게 좋다. 함수가 선언되기 전에 호출할 수 있기 때문에 자유롭게 코딩할 수 있음
// 함수 선언문이 가독성도 좋다. 다만 함수 표현식이 적합한 경우는 함수 표현식

