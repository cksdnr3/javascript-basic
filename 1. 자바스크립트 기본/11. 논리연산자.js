//                                                        논리 연산자
// ||(OR)
result = a || b; // a나 b둘 중 하나라도 true면 true를 반환
// 일반적으로는 불린값을 조작하는 데 쓰인다. 인수중 하나라도 true이면 true를 반환하고, 그렇지 않으면 false를 반환한다.

// 피연산자가 불린형이 아니면, 평가를 위해 불린형으로 변환된다.
if (1 || 0 ) { // (true || false)와 같음
    alert( 'thruthy' );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                  첫 번째 truthy를 찾는 OR 연산자
result = value1 || value2 || value3;
// OR연산자 연산 수행 알고리즘
// 1. 가장 왼쪽 피연산자부터 오른쪽으로 나아가며 피연산자를 평가
// 2. 각 피연산자를 불린형으로 변환, 그 값이 true면 해당 피연산자의 연산을 멈추고 해당 피연산자를 반환한다.
// 3. 피연산자를 모두 평가한 경우 (모둔 피연산자가 false인 경우) 마지막 피연산자를 반환한다.

// OR연산자 응용
// 1. 변수 또는 표현식으로 구성된 목록에서 첫 번째 truthy 얻기
// firstName, lastName, nickName이란 변수가 있는데 이 값들을 모두 옵션 값이라고 했을때
// ||을 사용하면 실제 값이 들어있는 변수를 찾고 그 값을 보여줄 수 있다. 변수 모두에 값이 없는 경우 익명을 보여준다.
let firstName = ""; // 선택적으로 비움
let lastName = ""; // 선택적으로 비움
let nickName = "바이올렛"; // 별명은 입력함
alert( firstName || lastName || nickName || "익명"); // 바이올렛

// 2. 단락 평가 (shor circuit evaluation)
// 두 번째 피연산자가 변수 할당과 같은 부수적인 효과를 가지는 표현식 일 때 명확히 볼 수 있다.
true || alert("not printed"); // true를 만나면 평가를 멈추기 때문에 alert가 실행되지 않음
false || alert("printed"); // 단락 평가는 연산자 왼쪽 조건이 falsy일 때만 명령어를 실행하고싶을 때 자주 쓰인다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                              && AND
// 두 피연산자가 모두 참일 때 true를 반환한다. 그 외의 경우는 false를 반환

// 첫 번째 falsy를 찾는 AND연산자 &&
result = value1 && value2 && value3;
// 연산 수행 알고리즘
// 1. 가장 왼쪽 피연산자부터 시작해 오른쪽으로 나아가며 피연산자를 평가한다.
// 2. 각 피연산자는 불린형으로 변환되어 값이 false면 평가를 멈추고 해당 피연산자의 값을 반환한다.
// 3. 피연산자가 모두 평가된 경우(모든 피연산자가 true로 평가된 경우)엔 마지막 피연산자가 반환된다.

// (!) if를 ||나 &&로 대체하지 마라
// if문보다 짧기 때문에 동작면에있어선 좋지만 코드도 결국엔 사람이 읽는 것 너무 짧기 때문에 의도를 파악하기 힘듬 가독성이 떨어짐
// (I) &&의 우선순위가 ||보다 높다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                      ! (NOT)
result = !value;
// 1. 피연산자를 불린형으로 변환한다.
// 2. 1에서 변환된 값의 역을 반환한다.

// NOT을 두 개 연달아 사용 (!!)하면 값을 불린형으로 변환할 수 있다. 역의 역
