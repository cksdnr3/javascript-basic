//                                                      함수
// 스크립트를 작성하다 보면 유사한 동작을 하는 코드가 여러 곳에서 필요할 때가 많다.
// 사용자가 로그인이나 로그아웃을 했을 때 안내 메시지를 보여주는 동작 같은 경우 등등
// 함수는 프로그램을 구성하는 주요 '구성 요소(building block)이다. 함수를 이용하면 중복 없이 유사한 동작을 하는 코드를 여러 번 호출할 수 있다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                     함수 선언
// 함수 선언(function declaration) 방식을 이용하면 함수를 만들 수 있다.

function name(parameters, parameters2) {

    // 본문
    alert("함수선언문");
}
// 함수 이름 옆에 괄호를 붙여 호출할 수 있다. name()

// 지역변수 (local variable)
// 함수 내에서 선언한 변수, 함수 안에서만 접근 가능

// 외부변수 (outer variable)
// 함수 내부에서 함수 외부의 변수인 외부변수에 접근할 수 있다.
// 접근 뿐만 아니라 수정도 가능

// (I) 전역 변수(global variable)
// 함수 외부에 선언된 변수는 전역 변수라고 부른다.
// 같은 이름을 가진 지역 변수에 의해 가려지지만 않는다면 모든 함수에서 접근할 수 있다.
// 변수는 연관되는 함수 내에 선언하고, 전역 변수는 되도록 사용하지 않는 것이 좋다.
// 근래에 작성된 코드들은 전역변수를 보통 사용하지 않으나, 프로젝트 전반에서 사용되는 데이터라면 전역변수가 유용할 수 있음을 알아두자

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                             매개변수 (parameter)
// 매개변수를 이용하면 임의의 데이터를 함수 안에 전달할 수 있다. 매개변수는 인수(argument)라고 불리기도 한다.
function showMessage(from, text) { // 함수 호출 시 인자로 보내진 값들을 매개변수 from과 text에 복사
    alert(from + ': ' + text); // 복사된 값을 사용
}

showMessage('Ann', 'Hello!'); // Ann; Hello!
showMessage('Ann', "What's up?"); // Ann: What's up?

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                             기본 값
// 매개변수에 값을 전달하지 않으면 그 값은 undefined가 된다.
function showMessage(from, text) {
    alert(from + ': ' + text); 
}
showMessage("Ann"); // Ann: undefined
// 매개변수는 2개지만 호출 할 때 값을 한 개만 보내면 from에는 값이 할당되지만 text에는 undefined가 할당된다.

function showMessage(from, text = "no text given") {
    alert(from + ': ' + text);
}
showMessage("Ann"); // Ann: no text given
// text가 값을 전달받지 못해도 undefined대신 기본값인 no text given이 할당된다.

// 기본 값은 함수와 같은 복잡한 표현식도 설정할 수 있다.
function showMessage(from, text = anotherFunction()) {
    // text에 값을 보내지 않을 경우 함수 anotherFunction() 호출되도록 함
}

// (I) 매개변수 기본값 평가 시점
// 자바스크립트에선 함수를 호출할 때마다 매개변수 기본값을 평가한다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                              매개변수 기본값을 설정할 수 있는 또 다른 방법
// 함수 선언부에서 매개변수 기본값을 설정하는 것 대신 함수가 실행되는 도중에 기본값을 설정하는 게 논리에 맞는 경우에 사용하는 방법
function showMessage(text) {
    if (text === undefined) {
        text = '빈 문자열'
    }
    alert(text);
}
showMessage(); // 빈 문자열, 매개변수를 보내지 않아 undefined가 할당되고 조건문을통해 매개변수에 값을 할당한다.
// 이 외에도 논리연산자 ||나 null 병합 연산자 ??를 사용할 수도 있다.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                              반환 값(Return Value)
// 함수를 호출했을 때 함수를 호출한 그 곳에 특정 값을 반환하게 할 수 있다.
function sum(a, b) {
    return a + b; // 매개변수 a와 b를 받아서 더한 값을 반환한다.
}
let result = sum(1, 2); // 1과 2를 인자로 보내 반환받은 값을 변수 result에 할당한다. *함수 호출 시 반환 값이 있으면 그것은 함수로 보는 것이 아닌 값으로 본다.
alert( result ); // 3
// 지시가 return은 함수 내 어디서든 사용 가능하지만 실행 흐름이 지시자 return을 만나면 함수 실행은 즉시 중단되고 함수를 호출한 곳에 값을 반환한다.

function showMovie(age) {
    if ( !checkAge(age) ) {
        return;
    }
    alert( "영화 상영");
}
// 지시자 return만 명시해 함수를 즉시 종료시킬 수도 있다. 조건문을 거치게되면 alert는 실행되지 않는다.

// (I) return문이 없거나 return 지시자만 있는 함수는 undefined를 반환한다.
function doNothing() {}
alert( doNothing() === undefined ); // true
// return 지시자만 있는 경우도 마찬가지임

// (!) return과 값 사이에 절대 줄을 삽입하지 마세요.
// 표현하려는 값이 긴 표현식인 경우, 표현식이 return지시자가 있는 줄에서 시작하도록 작성해야한다.
// 자바스크립트는 return지시자 줄 끝에 자동 마침표를 찍기 때문에...
return (
    some + long + expression
    + or
)
// 괄호를 통해 코드를 묶어서 적으면 됨

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                              함수 이름짓기
// 함수는 어떤 동작을 수행하기 위한 코드를 모아놓은 것이다. 따라서 함수의 이름은 대게 동사이다.
// 함수 이름은 가능한 간결하고 명확해야 한다. 동작의 의미를 파악하기 쉽도록 하기위해...

// 함수가 어떤 동작을 하는지 축약해서 설명해주는 동사를 접두어로 붙여 함수 이름을 만드는 게 관습이다.
// 예를 들어
showMessage(); // 메시지를 '보여줌'
getAge(); // 나이를 나타내는 값을 '얻음', 그 값을 반환
calcSum(); // 합계를 '계산', 그 결과를 반환
createForm(); // form을 '생성', form을 반환
checkPermission(); // 승인 여부를 '확인', 불린값을 반환

// (I) 함수는 동작 하나만 담당해야 한다.
// 함수는 함수 이름에 언급되어 있는 동작만을 정확히 수행해야 한다.
// 독립적인 두 개의 동작은 독립된 함수에 나눠서 수행할 수 있게 해야 한다. 심지어 한 장소에서 두 동작을 동시에 필요로 하는 경우라도...
// 위 경우 제3의 함수를 만들어 그곳에서 두 함수를 호출하도록 해야함.

//------------------------------------------------------------------------------------------------------------------------------------------------
//                                                          함수 == 주석
// 함수는 간결하고, 한 가지 기능만 수행할 수 있게 만들어야 한다. 함수가 길어지면 함수를 잘게 쪼갤 때가 되었다는 신호로 받아들어야한다.
// 함수를 분리해 작성하면 테스트와 디버깅이 쉬워지는 등 많은 장점이 있기 때문에 권유한다. 또한 함수 그 자체로 주석의 역할까지 한다.

// 소수를 출력하는 함수
function showPrimes(n) {
    nextPrime: for (let i = 2; i < n; i++) {
  
      for (let j = 2; j < i; j++) {
        if (i % j == 0) continue nextPrime;
      }
  
      alert( i ); // 소수
    }
  }
// 위 함수는 아래 처럼 '소수인 것을 확인하는 행동을 하는 함수 isPrime'과 '소수를 출력하는 함수 showPrime' 두 함수로 쪼갤 수 있다.
// 함수를 쪼개면 가독성이 좋기 때문에 테스트와 디버깅이 쉬워진다.

function showPrimes(n) {

    for (let i = 2; i < n; i++) {
      if (!isPrime(i)) continue;
  
      alert(i);  // a prime
    }
  }
  
function isPrime(n) {
for (let i = 2; i < n; i++) {
    if ( n % i == 0) return false;
}
return true;
}