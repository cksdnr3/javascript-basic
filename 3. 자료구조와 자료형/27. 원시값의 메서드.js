//                                                      원시값의 메서드
// 자바스크립트는 원시값을 마치 객체처럼 다룰 수 있게 해준다. 원시값에서도 객체에서처럼 메서드를 호출할 수 있다.

// 원시값은 객체가 아니다!
// 원시값과 객체의 차이점
// 원시값:
// 원시형 값이다.
// 원시형의 종류는 문자(string), 숫자(number), bigint, 불린(boolean), 심볼(symbol), null, undefined 총 일곱가지 형이 있다.

// 객체:
// 프로퍼티에 다양한 종류의 값을 저장할 수 있다.
// 대괄호를 사용해 만들 수 있고, 함수도 객체의 일종이다.
// 객체의 장점중 하나는 함수를 프로퍼티로 저장할 수 있다는 것이다.

// 자바스크립트는 날짜, 오류, HTML 요소(HTML element) 등을 다룰 수 있게 해주는 다양한 내장 객체를 제공한다.
// 이 객체들은 고유한 프로퍼티와 메서드를 가진다.
// 하지만 이런 기능을 사용하면 시스템 자원이 많이 소모된다는 단점이 있다.
// 객체는 원시값보다 무겁고, 내부 구조를 유지하기 위해 추가 자원을 사용하기 때문이다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                            원시값을 객체처럼 사용하기
// 자바스크립트 창안자는 다음과 같은 모순적인 상황을 해결하고 싶었다.
// 1. 문자열이나 숫자와 같은 원시값을 다루어야 하는 작업이 많은데, 메서드를 사용하면 작업을 수월하게 할 수 있을 것 같다는 생각
// 2. 그런데 원시값은 가능한 한 빠르고 가벼워야함.

// 자바스크립트 창안자는 아래와 같은 해결책을 모색했다.
// 1. 원시값은 원시값 그대로 남겨둬 단일 값 형태를 유지한다.
// 2. 문자열, 숫자, 불린, 심볼의 메서드와 프로퍼티에 접근할 수 있도록 언어 차원에서 허용한다.
// 3. 이를 가능하게 하기 위해, 원식밧이 메서드나 프로퍼티에 접근하려 하면 추가 기능을 제공해주는 특수한 객체, 원시 래퍼 객체(object wrapper)를 만들어 준다.
// 이 객체는 곧 삭제된다.

// 래퍼 객체는 원시 타입에 따라 종류가 다양한데, 원시 자료형의 이름을 그대로 차용해, String, Number, Boolean, Symbol라고 부른다.

// 인수로 받은 문자열의 모든 글자를 대문자로 바꿔주는 메서드 str.toUpperCase()를 예로 들어
let str = "Hello";
alert( str.toUpperCase() ); // HELLO
// 1. 문자열 str은 원시값이므로 원시값의 프로퍼티(toUpperCase)에 접근하는 순간 특별한 객체인 원시 래퍼 객체가 만들어진다.
// 이 래퍼 객체는 문자열의 값을 알고 있고, toUpperCase()와 같은 유용한 메서드를 가지고 있다.
// 2. 메서드가 실행되고, 새로운 문자열이 반환된다.
// 3. 특별한 객체는 파괴되고, 원시값 str만 남는다.

// (I) n번째 자리에서 소수점 아래 숫자를 반올림하는 숫자형 메서드 toFixed(n)
let n = 1.23456;
alert( n.toFixed(2) ); // 1.23

// (!) String/ Number/ Boolean를 생성자론 사용 하면 안된다.
// Java등의 몇몇 언어에선 new Number(1) 과 같은 문법을 사용해 원하는 타입의 래퍼 객체를 직접 만들 수 있다.
// 자바스크립트도 하위 호환성을 위해 이 기능을 남겨 두었는데, 혼동을 불러일으키기 때문에 추천하지 않는다.
alert( typeof 0 ); // "number"
alert( typeof new Number(0) ); // "object", 숫자 0이 아닌 래퍼 객체를 평가함

let zero = new Number(0);
if (zero) {
    alert("anycode");
}
// 객체는 항상 참을 반환하기 때문에 위 조건문은 작동한다. 하지만, 숫자 0을 참으로 볼 수 있을까요?

// 그런데, new를 붙이지 않고 래퍼 객체를 사용하는 건 괜찮다. new없이 사용하면 인수를 원하는 형의 원시값으로 바꿔준다.
let num = Number("123"); // 123, 문자열을 숫자로 바꿔줌

// (!) null/ undefined는 메서드가 없다.
// 특수 자료형인 null과 undefined는 래퍼객체도 없고 메서드도 없다. 가장 원시적 자료형

// (I) 원시 래퍼 객체에 추가 프로퍼티를 넣을 수 없다.
// 엄격 모드에선 래퍼 객체에 프로퍼티를 추가하는 순간 에러가 발생한다.
// 비 엄격 모드에선 래퍼 객체에 프로퍼티가 추가되긴 하지만, 래퍼 객체는 곧바로 삭제되기 때문에 사용 할 수 없음
