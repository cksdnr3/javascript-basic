//                                                          숫자형
// 자바스크립트는 숫자를 나타내는 두 가지 자료형을 지원한다.
// 1. 일반적인 숫자인 배정밀도 부동소수점 숫자로 알려진 64비트 형식의 IEEE-754
// 2. 임의의 길이를 가진 아주 큰 정수 BigInt

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                        숫자를 입력하는 다양한 방법
let billion = 1000000000;
// 위 10억(billion)은 아래와 같이 줄여서 표기할 수 있다.
let billion = 1e9;
// 즉, e는 0의 개수를 적는 것이고 10의 e제곱 하는 것이다.

let ms = 0.000001;
// 위 1마이크로초(백만 분의 1초)는 아래와 같이 줄여서 표기할 수 있다.
let ms = 1e-6; // 1에서 왼쪽으로 6번 소수점 이동

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                      toString(base)
// num.toString(base)메서드는 base진법으로 num을 표현하고 이를 문자형으로 변환해 반환한다.
// base는 2 ~ 36까지 쓸 수 있는데, 기본값은 10이다.
// 16진수 - 색, 문자 인코딩 등을 표현할 때 사용한다. 숫자는 0부터 9, 10이상의 수는 A부터 F를 사용한다.
// 2진수 - 비트 연산 디버깅에 주로 사용한다.
// 36진수 - url을 줄이는 것과 같이 숫자로 된 긴 식별자를 짧게 줄일 때 유용하다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                          어림수 구하기(rounding)
// 어림수를 구하는 것은 숫자를 다룰 때 가장 많이 사용되는 연산 중 하나이다.
// 어림수 관련 내장 함수
// 1. Math.floor - 소수점 첫째 자리에서 내림(버림). 3.1은 3, -1.1은 -2가 된다.
// 2. Math.ceil - 소수점 첫째 자리에서 올림. 3.1은 4, -1.1은 -1이 된다.
// 3. Math.round - 소수점 첫재 자리에서 반올림. 3.1은 3, 3.6은 4, -1.1은 -1이 된다.
// 4. Math.trunc - 소수부를 무시. 3.1은 3이 되고 -1.1은 -1이 된다.

// 그런데 소수점 4번째 수를 기준으로 어림수를 구해야 하는 경우는 어떻게 할까?
// 예를 들어 1.2345가 있는데 소수점 두 번째 자릿수까지만 남겨 1.23을 만들고 싶은 경우
// 두 가지 방법이 있다.
// 1. 곱하기와 나누기
// 100또는 100보다 큰 10의 거듭제곱 수를 곱한 후, 원하는 어림수 내장 함수를 호출하고 처음 곱한 수를 다시 나누면 된다.
let num = 1.23456;
alert( Math.floor(num * 100) / 100); // 1.23456 -> 123.456 -> 123 -> 1.23

// 2. 소수점 n 번째 수 까찌의 어림수를 구한 후 이를 문자형으로 반환해주는 메서드인 toFixed(n)을 사용한다.
// toFixed는 Math.round와 마찬가지로 반올림 어림수를 구한다.
let num = 12.36;
alert( num.toFixed(1) ); // 12.4
// toFixed를 사용 할 때 주의할 점은 이 메서드의 반환 값이 문자열이기 때문에 소수부의 길이가 인수보다 작으면 끝에 0이 추가된다.
let num = 12.34;
alert( num.toFixed(5) ); // 12.34000

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                              부정확한 계산
alert( 0.1 + 0.2 == 0.3 ); // false
// 0.1 과 0.2의 합이 0.3과 일치하지 않는다.
alert( 0.1 + 0.2 ); // 0.30000000000000004
// 숫자는 0과 1로 이루어진 이진수로 변환되어 연속된 메모리 공간에 저장된다.
// 그런데 10진법을 사용하면 쉽게 표현할 수 있는 0.1, 0.2 같은 분수는 이진법으로 표현하면 무한 소수가 된다.
// 10진 법에서 1/3을 정확히 나타낼 수 없듯이, 이진법을 사용해 0.1또는 0.2를 정확하게 저장하는 방법은 없다.
// IEEE-754에선 가장 가까운 숫자로 반올림하는 방법을 사용해 이런 문제를 해결한다. 그런데 반올림 규칙을 적용하면 발생하는 작은 정밀도 손실을 우리가
// 볼 수는 없지만 실제로 손실은 발생한다.

// 위와 같은 문제는 toFixed(n)메서드를 사용해 어림수를 만들어 해결할 수 있다.
let sum = 0.1 + 0.2;
alert( sum.toFixed(2) ); // 0.30
// 위와 같은 문제를 완벽하게 해결할 수는 없다. 그저 어림수를 구하는 방법뿐....

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                                isNaN과 isFinite
// 두 특수 숫자는 숫자형에 속하지만 정상적인 숫자는 아니기 때문에, 정상적인 숫자와 구분하기 위한 특별한 함수가 존재한다.

// isNaN(value) - 인수를 숫자로 변환한 다음 NaN인지 테스트함
alert( isNaN(NaN) ); // true
alert( isNaN("str")); // true
// NaN은 NaN자기 자신을 포함하여 그 어떤 값과도 같지 않기 때문에 isNaN()메서드는 필요하다.

// isFinite(valuye) - 인수를 숫자로 변환하고 변환한 숫자가 일반 숫자인 경우 true를 반환함
alert( isFinite("15") ); // true
alert( isFinite("str") ); // true
alert( isFinite(Infinity)); // false
// isFinite는 보통 문자열이 일반 숫자인지 검증하는 데 사용되곤 한다.

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                          parseInt와 parseFloat
// 숫자형으로의 형변환의 규칙은 꽤 엄격하다. 피연산자가 숫자가 아니면 형 변환이 실패한다.
alert( +"100px" ); // NaN
// 그런데 실무에선 CSS등에서 100px과 같은 숫자와 단위를 함께 쓰는 경우가 흔하다.
// parseInt와 parseFloat는 만자열의 숫자만 추출하기 위해 만들어진 메서드이다.
// 두 함수는 불가능할 때까지 문자열에서 숫자를 읽는다. 숫자를 읽는 도중 오류가 발생하면 수집된 숫자를 반환한다.
alert(parseInt("100px")); // 100
alert(parseFloat("12.5em")); // 12.5

// 읽을 수 있는 숫자가 없을 때 NaN을 반환한다.
alert(parseInt("a123")); // NaN

//----------------------------------------------------------------------------------------------------------------------------------------------
//                                                  기타 수학 함수
// Math.random() - 0과 1사이의 난수를 반환한다.
alert(Math.random()); // 0.432462.... 무작위 수

// Math.max(a, b, c...) / Math.min(a, b, c...) - 인수 중 최대/최솟값을 반환한다.
alert(Math.max(3, 5, -10, 0, 1)); // 5
alert(Math.min(1, 2)); // 1